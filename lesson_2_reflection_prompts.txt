What happens when you initialize a repository? Why do you need to do it?
git init creates the git log directory of commits. Need to set up the structure to be able to save commits and keep track of different versions.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
git add adds files in the working directory to the staging area before you commit them to the repo. Lets you prepare a group of logical changes before committing them all together.

How can you use the staging area to make sure you have one commit per logical
change?
If a logical change affects multiple files, you can add them to the staging area one at a time as you work through them. Then you can commit when you've finished everything that constitutes the logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Sending a chapter to multiple reviewers to edit simultaneously... branches show where the file split and can then merge the edits later.

How do the diagrams help you visualize the branch structure?
They make it easier to see the sequence of changes and at what point the branches split off.
git log --graph --oneline shows the log in a graph structure.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
All the changes made within the two branches are combined. The diagram helps show where they split and when they're combined.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
Pros = quicker, easier, follows logical rules so you know what it will merge and what it will read as a conflict. Cons = if you don't think through what all the changes were, may overlook something that doesn't register as a conflict, or may delete/add something accidentally and introduce or re-introduce an error.